# coding: utf-8

import asyncio
from datetime import datetime
import json
import os
import random
import re
import time
import io

import aiofiles
import aiogram
import dateparser
import dotenv
import markovify
from aiogram import Dispatcher, types
from aiogram.types import InputFile
from PIL import Image, ImageDraw, ImageFont
from loguru import logger

from middleware import BotMessagesMiddleware
from mem import populate_base  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã

dotenv.load_dotenv()

BOT = aiogram.Bot(
    os.environ["TOKEN"],
    parse_mode=aiogram.types.ParseMode.HTML
)
DP = Dispatcher(BOT)

USER_BASE = {}

async def onBotStart(dp: Dispatcher) -> None:
    global USER_BASE
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    USER_BASE = await load_db()

async def load_db(folder="db"):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dict_to_return = {}
    for filename in os.listdir(folder):
        if filename.endswith(".jsonc"):
            async with aiofiles.open(os.path.join(folder, filename), 'r', encoding='utf-8') as file:
                contents = await file.read()
                dict_to_return[filename[:-6]] = json.loads(contents)
    return dict_to_return

async def save_db(folder="db"):
    for chat_id, data in USER_BASE.items():
        async with aiofiles.open(os.path.join(folder, f"{chat_id}.jsonc"), 'w', encoding='utf-8') as file:
            await file.write(json.dumps(data, ensure_ascii=False))

DP.middleware.setup(BotMessagesMiddleware(populate_base))

@DP.message_handler(commands=["start"])
async def hello_handler(msg: types.Message):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! üòä\n\n–ß—Ç–æ –±—ã —è —Ä–∞–±–æ—Ç–∞–ª, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ü´Ç")

@DP.chat_join_request_handler()
@DP.message_handler(content_types=["new_chat_members", "group_chat_created", "supergroup_chat_created"])
async def chat_join_handler(msg: types.Message):
    bot_id = (await BOT.get_me()).id
    if not any([i for i in msg.new_chat_members if i.id == bot_id]):
        return
    await msg.answer("<b>–ü—Ä–∏–≤–µ—Ç! üôã</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –∫ —Å–µ–±–µ –≤ –±–µ—Å–µ–¥—É.\n–î–ª—è –º–æ–µ–π —Ä–∞–±–æ—Ç—ã –≤—ã–¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@DP.message_handler(commands=["stats", "statistics", "stat"])
async def stats_handler(msg: types.Message):
    await msg.answer(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÑπÔ∏è</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ö—Ä–∞–Ω–∏—Ç—Å—è <code>{len(USER_BASE[str(msg.chat.id)]['Messages'])}</code> —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def check_admin(msg: types.Message):
    if not (await BOT.get_chat_member(msg.chat.id, msg.from_user.id)).is_chat_admin():
        await msg.answer("‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞</b>.")
        return False
    return True

@DP.message_handler(commands=["disable", "turn_off", "turnoff", "off"])
async def disable_handler(msg: types.Message):
    if not await check_admin(msg):
        return

    args = (msg.get_args() or "")
    disabled_seconds = 0 

    parsed = dateparser.parse(args) if args else None
    if parsed:
        disabled_seconds = (parsed.timestamp() - datetime.now().timestamp())
    else:
        disabled_seconds = 7 * 24 * 60 * 60  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π

    if disabled_seconds < 120:  # –º–∏–Ω–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    await msg.answer(f"–û–∫–µ–π, —è –æ—Ç–∫–ª—é—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ <code>{seconds_to_userfriendly_string(disabled_seconds)}</code>.")
    update_record(msg.chat.id, {"OffUntil": int(time.time()) + int(disabled_seconds)})

@DP.message_handler(commands=["enable", "turn_on", "turnon", "on"])
async def enable_handler(msg: types.Message):
    if not await check_admin(msg):
        return

    update_record(msg.chat.id, {"OffUntil": 0})
    await msg.answer("–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üôÇ")

@DP.message_handler()
async def message_handler(msg: types.Message):
    message_text = msg.text or msg.caption
    add_database_message(msg.chat.id, message_text)

    if USER_BASE[str(msg.chat.id)]["OffUntil"] > int(time.time()):
        return

    is_triggered = any([i for i in ["–º–∞–∫—Å", "max", "@maxzens_bot"] if i in message_text.lower()])
    if msg.reply_to_message and not is_triggered:
        is_triggered = msg.reply_to_message.from_user.id == BOT.id

    if random.randint(1, 100) > (50 if is_triggered else 20):
        return

    model = markovify.NewlineText("\n".join(USER_BASE[str(msg.chat.id)]["Messages"]).lower())
    msg_generated = model.make_sentence(tries=10) if (random.randint(0, 2) == 2) else model.make_short_sentence(50, tries=100)

    if not msg_generated and random.randint(0, 1):
        msg_generated = random.choice(USER_BASE[str(msg.chat.id)]["Messages"])

    if msg_generated:
        msg_generated = re.sub(r"@(\w*)", "<i><a href=\"https://t.me/\\1\">@\\1</a></i>", msg_generated)
        await asyncio.sleep(random.uniform(0, 1))
        await msg.bot.send_chat_action(msg.chat.id, "typing")
        await asyncio.sleep(random.uniform(1, 3))

        if random.randint(0, 1):
            await msg.answer(msg_generated, disable_notification=True)
        else:
            await msg.reply(msg_generated, disable_notification=True)

def seconds_to_userfriendly_string(seconds):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–µ–∫—É–Ω–¥ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    seconds = int(seconds)
    if seconds < 0:
        seconds = -seconds
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    parts = []
    if days: parts.append(f"{days} –¥–Ω." if days > 1 else "1 –¥–Ω.")
    if hours: parts.append(f"{hours} —á." if hours > 1 else "1 —á.")
    if minutes: parts.append(f"{minutes} –º–∏–Ω." if minutes > 1 else "1 –º–∏–Ω.")
    if seconds: parts.append(f"{seconds} —Å–µ–∫." if seconds > 1 else "1 —Å–µ–∫.")
    return ", ".join(parts)

def add_database_message(chat_id: int, message_text: str):
    message_text = message_text.strip()
    if not message_text:
        return

    if str(chat_id) not in USER_BASE:
        USER_BASE[str(chat_id)] = {"Messages": [], "OffUntil": 0}

    USER_BASE[str(chat_id)]["Messages"].append(message_text)

def update_record(chat_id: int, new_value: dict):
    if str(chat_id) not in USER_BASE:
        USER_BASE[str(chat_id)] = {}
    USER_BASE[str(chat_id)].update(new_value)

async def bg_saver():
    while True:
        await asyncio.sleep(60)  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –±–∞–∑—É —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        await save_db()

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    os.makedirs("db", exist_ok=True)

    loop.create_task(bg_saver())
    aiogram.utils.executor.start_polling(
        dispatcher=DP,
        on_startup=onBotStart,
        skip_updates=True,
        loop=loop,
    )
