# coding: utf-8

import asyncio
import os
import random
import re
from datetime import datetime
from typing import cast

import aiogram
import dotenv
import markovify
from aiogram import Dispatcher
from aiogram.types import Message as MessageType
from loguru import logger
from PIL import Image, ImageDraw, ImageFont

dotenv.load_dotenv()

BOT = aiogram.Bot(
    os.environ["TOKEN"],
    parse_mode=aiogram.types.ParseMode.HTML
)
DP = Dispatcher(BOT)

# –ë–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
USER_BASE = {}

@DP.message_handler(commands=["start"])
async def hello_handler(msg: MessageType):
    # –ò–∑-–∑–∞ Middleware, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! üòä\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@DP.chat_join_request_handler()
@DP.message_handler(content_types=["new_chat_members", "group_chat_created", "supergroup_chat_created"])
async def chat_join_handler(msg: MessageType):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ —á–∞—Ç.
    """
    bot_id = (await BOT.get_me()).id
    if not any([i for i in msg.new_chat_members if i.id == bot_id]):
        return

    await msg.answer("<b>–ü—Ä–∏–≤–µ—Ç! üôã</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ —á–∞—Ç.")

@DP.message_handler(commands=["stats", "statistics", "stat"])
async def stats_handler(msg: MessageType):
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    chat_id = str(msg.chat.id)
    await msg.answer(
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÑπÔ∏è</b>\n\n–í –ø–∞–º—è—Ç–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ö—Ä–∞–Ω–∏—Ç—Å—è <code>{len(USER_BASE.get(chat_id, {}).get('Messages', []))}</code> —Å–æ–æ–±—â–µ–Ω–∏–π."
    )

async def check_admin(msg: MessageType):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ.
    """
    if not (await BOT.get_chat_member(msg.chat.id, msg.from_user.id)).is_chat_admin():
        await msg.answer("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
        return False
    return True

@DP.message_handler(commands=["disable", "off"])
async def disable_handler(msg: MessageType):
    """
    –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
    """
    if not await check_admin(msg):
        return

    USER_BASE[str(msg.chat.id)]["OffUntil"] = datetime.now().timestamp() + 7 * 24 * 60 * 60
    await msg.answer("–û–∫–µ–π, —è –æ—Ç–∫–ª—é—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.")

@DP.message_handler(commands=["enable", "on"])
async def enable_handler(msg: MessageType):
    """
    –í–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
    """
    if not await check_admin(msg):
        return

    USER_BASE[str(msg.chat.id)]["OffUntil"] = 0
    await msg.answer("–¢–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üôÇ")

def populate_base(chat_id: int | str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    if str(chat_id) not in USER_BASE:
        USER_BASE[str(chat_id)] = {"Messages": [], "OffUntil": 0}

def add_database_message(chat_id: int | str, message_text: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É.
    """
    message_text = message_text.strip()
    if message_text:
        USER_BASE[str(chat_id)]["Messages"].append(message_text)

async def generate_meme(text: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –º–µ–º.
    """
    image = Image.open("memes/meme_template.jpg")  # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –º–µ–º–∞
    draw = ImageDraw.Draw(image)
    font = ImageFont.truetype("arial.ttf", 24)  # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É

    text_position = (20, 20)  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    draw.text(text_position, text, fill="white", font=font)

    meme_path = f"memes/generated_meme_{random.randint(1000, 9999)}.jpg"
    image.save(meme_path)

    return meme_path

@DP.message_handler()
async def message_handler(msg: MessageType):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = str(msg.chat.id)
    message_text = msg.text or msg.caption
    populate_base(chat_id)
    add_database_message(chat_id, message_text)

    if USER_BASE[chat_id]["OffUntil"] > datetime.now().timestamp():
        return

    is_triggered = any([i for i in ["–º–∞–∫—Å", "max", "@maxzens_bot"] if i in message_text.lower()])
    if msg.reply_to_message and not is_triggered:
        is_triggered = msg.reply_to_message.from_user.id == BOT.id

    if random.randint(1, 100) > (80 if is_triggered else 8):
        return

    model = markovify.NewlineText("\n".join(USER_BASE[chat_id]["Messages"]).lower())
    msg_generated = model.make_sentence(tries=10) or random.choice(USER_BASE[chat_id]["Messages"])

    if msg_generated:
        msg_generated = re.sub(r"@(\w*)", "<i><a href=\"https://t.me/\\1\">@\\1</a></i>", msg_generated)
        meme_path = await generate_meme(msg_generated)

        await asyncio.sleep(random.uniform(1, 2))
        await msg.bot.send_chat_action(msg.chat.id, "upload_photo")
        await asyncio.sleep(random.uniform(1, 2))
        await msg.answer_photo(open(meme_path, "rb"))

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    os.makedirs("memes", exist_ok=True)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–º–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    aiogram.utils.executor.start_polling(
        dispatcher=DP,
        on_startup=lambda dp: logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"),
        skip_updates=True,
        loop=loop,
    )
