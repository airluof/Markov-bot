# coding: utf-8

import asyncio
from datetime import datetime
import json
import os
import random
import re
import time
from typing import cast
import io

import aiofiles
import aiogram
import dateparser
import dotenv
import markovify
from aiogram import Dispatcher
from aiogram.types import Message as MessageType, InputFile
from PIL import Image, ImageDraw, ImageFont
from loguru import logger

from middleware import BotMessagesMiddleware

dotenv.load_dotenv()

BOT = aiogram.Bot(
    os.environ["TOKEN"],
    parse_mode=aiogram.types.ParseMode.HTML
)
DP = Dispatcher(BOT)

USER_BASE = {}

@DP.message_handler(commands=["start"])
async def hello_handler(msg: MessageType):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! üòä\n\n–ß—Ç–æ –±—ã —è —Ä–∞–±–æ—Ç–∞–ª, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ü´Ç\n–ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ —è —Å—É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ üëÄ")

@DP.chat_join_request_handler()
@DP.message_handler(content_types=["new_chat_members", "group_chat_created", "supergroup_chat_created"])
async def chat_join_handler(msg: MessageType):
    bot_id = (await BOT.get_me()).id
    if not any([i for i in msg.new_chat_members if i.id == bot_id]):
        return
    await msg.answer("<b>–ü—Ä–∏–≤–µ—Ç! üôã</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –∫ —Å–µ–±–µ –≤ –±–µ—Å–µ–¥—É.\n–î–ª—è –º–æ–µ–π —Ä–∞–±–æ—Ç—ã –≤—ã–¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@DP.message_handler(commands=["stats", "statistics", "stat"])
async def stats_handler(msg: MessageType):
    await msg.answer(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÑπÔ∏è</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ö—Ä–∞–Ω–∏—Ç—Å—è <code>{len(USER_BASE[str(msg.chat.id)]['Messages'])}</code> —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def check_admin(msg: MessageType):
    if not (await BOT.get_chat_member(msg.chat.id, msg.from_user.id)).is_chat_admin():
        await msg.answer("‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞</b>.")
        return False
    return True

@DP.message_handler(commands=["disable", "turn_off", "turnoff", "off"])
async def disable_handler(msg: MessageType):
    if not await check_admin(msg):
        return

    args = (msg.get_args() or "")
    disabled_seconds = 0 

    parsed = None
    if args:
        parsed = dateparser.parse(args)
    else:
        disabled_seconds = 7 * 24 * 60 * 60

    if parsed:
        disabled_seconds = (datetime.now().timestamp() - parsed.timestamp())

    if disabled_seconds < 2 * 60:
        await msg.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. –£–∫–∞–∑–∞–Ω–Ω–æ–µ —Ç–æ–±–æ—é –∑–Ω–∞—á–µ–Ω–∏–µ (<code>{seconds_to_userfriendly_string(disabled_seconds)}</code>) —É–∂ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ.\n\n–ü—Ä–∏–º–µ—Ä: <code>/disable 5 —á–∞—Å–æ–≤</code>")
        return

    await msg.answer(f"–û–∫–µ–π, —è –æ—Ç–∫–ª—é—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –Ω–∞ <code>{seconds_to_userfriendly_string(disabled_seconds)}</code>.\n\n‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è –≤–∫–ª—é—á–∏—Ç—å, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /enable.")
    update_record(
        msg.chat.id,
        {
            "OffUntil": int(time.time()) + int(disabled_seconds)
        }
    )

@DP.message_handler(commands=["enable", "turn_on", "turnon", "on"])
async def enable_handler(msg: MessageType):
    if not await check_admin(msg):
        return

    await msg.answer(
        "–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üôÇ"
        if USER_BASE[str(msg.chat.id)]["OffUntil"] else
        "–î—è—Ç–µ–ª! –Ø –∏ —Ç–∞–∫ –≤–∫–ª—é—á—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–µ—Å–µ–¥—ã –¥–æ —ç—Ç–æ–≥–æ."
    )

    update_record(
        msg.chat.id,
        {
            "OffUntil": 0
        }
    )

@DP.message_handler()
async def message_handler(msg: MessageType):
    message_text = msg.text or msg.caption
    add_database_message(
        msg.chat.id,
        message_text
    )

    if USER_BASE[str(msg.chat.id)]["OffUntil"] > int(time.time()) and USER_BASE[str(msg.chat.id)]["OffUntil"]:
        return

    is_triggered = any([i for i in ["–º–∞–∫—Å", "max", "@maxzens_bot"] if i in message_text.lower()])

    if msg.reply_to_message and not is_triggered:
        is_triggered = msg.reply_to_message.from_user.id == BOT.id

    if random.randint(1, 100) > (80 if is_triggered else 8):
        return

    model = markovify.NewlineText("\n".join(USER_BASE[str(msg.chat.id)]["Messages"]).lower())
    msg_generated = model.make_sentence(tries=10) if (random.randint(0, 2) == 2) else model.make_short_sentence(50, tries=100)

    if not msg_generated and random.randint(0, 1):
        msg_generated = random.choice(USER_BASE[str(msg.chat.id)]["Messages"])

    if msg_generated:
        msg_generated = re.sub(r"@(\w*)", "<i><a href=\"https://t.me/\\1\">@\\1</a></i>", msg_generated)

        await asyncio.sleep(random.uniform(0, 1))
        await msg.bot.send_chat_action(msg.chat.id, "typing")
        await asyncio.sleep(random.uniform(1, 3))

        if random.randint(0, 1):
            await msg.answer(msg_generated, disable_notification=True, allow_sending_without_reply=True, disable_web_page_preview=True)
        else:
            await msg.reply(msg_generated, disable_notification=True, allow_sending_without_reply=True, disable_web_page_preview=True)

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    os.makedirs("db", exist_ok=True)

    DP.middleware.setup(
        BotMessagesMiddleware(populate_base)
    )

    loop.create_task(bg_saver())
    aiogram.utils.executor.start_polling(
        dispatcher=DP,
        on_startup=onBotStart,
        skip_updates=True,
        loop=loop,
    )
